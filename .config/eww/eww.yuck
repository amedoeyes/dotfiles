(defpoll date
	:interval "10s"
	:initial "{}"
	"./scripts/date"
)

(defpoll battery
	:interval "10s"
	:initial "{}"
	"./scripts/battery"
)

(defpoll network
	:interval "10s"
	:initial "{}"
	"./scripts/network"
)

(deflisten volume
	:initial "{}"
	"./scripts/volume"
)

(deflisten workspaces
	:initial '[{"id":1,"active":false,"icon":" "},{"id":2,"active":false,"icon":" "},{"id":3,"active":false,"icon":" "},{"id":4,"active":false,"icon":" "},{"id":5,"active":false,"icon":" "},{"id":6,"active":false,"icon":" "},{"id":7,"active":false,"icon":" "},{"id":8,"active":false,"icon":" "},{"id":9,"active":false,"icon":" "},{"id":10,"active":false,"icon":" "}]'
	"./scripts/workspaces"
)

(defwidget date[]
	(box
		:space-evenly false
		(box
		:space-evenly false
			(label
				:class "icon"
				:text {date.time_icon}
			)
			(label
				:text {date.time}
			)
		)
		(box
		:space-evenly false
			(label
				:class "icon"
				:text {date.date_icon}
			)
			(label
				:text {date.date}
			)
		)
	)
)

(defwidget battery[]
	(box
		:visible {battery.percentage != -1}
		:space-evenly false
		(label
			:class "icon"
			:text {battery.icon}
		)
		(label
			:text "${battery.percentage}%"
		)
	)
)

(defwidget network[]
	(box
		:space-evenly false
		(label
			:class "icon"
			:text {network.icon}
		)
		(label
			:text "${network.connection}"
		)
	)
)

(defwidget volume[]
	(eventbox
		(box
			:space-evenly false
			(label
				:class "icon"
				:text {volume.icon}
			)
			(label
				:text "${volume.volume}%"
			)
		)
	)
)

(defwidget workspaces []
	(eventbox
		(box
			:class "workspaces"
			:space-evenly false
			(for i in "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
				(button
					:class "workspace ${workspaces[i].active ? "active" : ""}"
					:onclick "hyprctl dispatch workspace ${workspaces[i].id}"
					(label
						:text {workspaces[i].icon}
					)
				)
			)
		)
	)
)

(defwidget left[]
	(box
		:class "left"
		:orientation "h"
		:halign "start"
		:space-evenly false
		(date)
	)
)

(defwidget center[]
	(box
		:class "center"
		:orientation "h"
		:halign "center"
		:space-evenly false
		(workspaces)
	)
)

(defwidget right[]
	(box
		:class "right"
		:orientation "h"
		:halign "end"
		:space-evenly false
		(volume)
		(network)
		(battery)
	)
)

(defwindow bar
	:exclusive true
	:geometry (geometry
		:width "100%"
		:anchor "top center"
	)
	(centerbox
		:class "bar-inner"
		(left)
		(center)
		(right)
	)
)
