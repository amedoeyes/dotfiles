#!/bin/bash

source "$XDG_BIN_HOME"/pactl_helpers.sh

get_icon_prefix() {
	local device
	device=$1

	if [[ $device == "sink" ]]; then
		printf "audio-volume"
	elif [[ $device == "source" ]]; then
		printf "microphone-sensitivity"
	else
		printf "Invalid device: %s\n" "$device" >&2
		exit 1
	fi
}

get_icon() {
	local device
	device="$1"
	local icon_prefix
	icon_prefix=$(get_icon_prefix "$device")
	local volume
	volume="$2"

	if "$(get_mute "$device")"; then
		printf "%s-none-symbolic" "$icon_prefix"
		return
	fi

	if ((volume >= 66)); then
		printf "%s-high-symbolic" "$icon_prefix"
	elif ((volume >= 33)); then
		printf "%s-medium-symbolic" "$icon_prefix"
	elif ((volume >= 0)); then
		printf "%s-low-symbolic" "$icon_prefix"
	fi
}

notify() {
	local volume
	volume=$(get_volume "$1")
	local icon
	icon=$(get_icon "$1" "$volume")

	dunstify "Volume $volume%" -i "$icon" -u low -t 2000 -h int:value:"$volume" -r 999
}

input_increment() {
	set_volume source "${1:-5}" +
}

input_decrement() {
	set_volume source "${1:-5}" -
}

input_toggle() {
	set_mute source toggle
}

input_notify() {
	notify source
}

input_help() {
	printf "Usage: %s -i, --input [OPTION]...\n" "$0"
	printf "Control audio input device\n\n"
	printf "Options:\n"
	printf "  -t, --toggle               Toggle mute\n"
	printf "  -i, --increment [VALUE]    Increment volume by VALUE\n"
	printf "  -d, --decrement [VALUE]    Decrement volume by VALUE\n"
	printf "  -n, --notify               Display volume notification\n\n"
	exit 1
}

output_toggle() {
	set_mute sink toggle
}

output_increment() {
	set_volume sink "${1:-5}" +
}

output_decrement() {
	set_volume sink "${1:-5}" -
}

output_notify() {
	notify sink
}

output_help() {
	printf "Usage: %s -o, --output [OPTION]...\n" "$0"
	printf "Control audio output device\n\n"
	printf "  -t, --toggle               Toggle mute\n"
	printf "  -i, --increment [VALUE]    Increment volume by VALUE\n"
	printf "  -d, --decrement [VALUE]    Decrement volume by VALUE\n"
	printf "  -n, --notify               Display volume notification\n\n"
	exit 1
}

help() {
	printf "Usage: %s [OPTION]...\n" "$0"
	printf "Control audio input and output devices.\n\n"
	printf "Options:\n"
	printf "  -i, --input [OPTION]...    Control audio input device\n"
	printf "  -o, --output [OPTION]...   Control audio output device\n"
	printf "  -h, --help                 Display this help and exit\n\n"
	printf "Input options:\n"
	printf "  -t, --toggle               Toggle mute\n"
	printf "  -i, --increment [VALUE]    Increment volume by VALUE\n"
	printf "  -d, --decrement [VALUE]    Decrement volume by VALUE\n"
	printf "  -n, --notify               Display volume notification\n\n"
	printf "Output options:\n"
	printf "  -t, --toggle               Toggle mute\n"
	printf "  -i, --increment [VALUE]    Increment volume by VALUE\n"
	printf "  -d, --decrement [VALUE]    Decrement volume by VALUE\n"
	printf "  -n, --notify               Display volume notification\n\n"
	exit 1
}

handle_input() {
	case "$1" in
	-t | --toggle) input_toggle ;;
	-i | --increment) input_increment "${2:-5}" ;;
	-d | --decrement) input_decrement "${2:-5}" ;;
	-n | --notify) input_notify ;;
	*) input_help ;;
	esac
}

handle_output() {
	case "$1" in
	-t | --toggle) output_toggle ;;
	-i | --increment) output_increment "${2:-5}" ;;
	-d | --decrement) output_decrement "${2:-5}" ;;
	-n | --notify) output_notify ;;
	*) output_help ;;
	esac
}

if (($# == 0)); then
	help
fi

IFS=" " read -r -a args <<<"$@"
case "${args[0]}" in
-i | --input) handle_input "${args[@]:1}" ;;
-o | --output) handle_output "${args[@]:1}" ;;
-h | --help) help ;;
*) help ;;
esac
