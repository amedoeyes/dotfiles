#!/bin/bash

get_monitors_geometry() {
	hyprctl monitors -j | jq -r '.[] | "\(.x),\(.y) \(.width)x\(.height)"'
}

get_windows_geometry() {
	local -r workspaces=$(hyprctl monitors -j | jq -r 'map(.activeWorkspace.id)')
	local -r windows=$(hyprctl clients -j | jq -r --argjson workspaces "$workspaces" 'map(select([.workspace.id] | inside($workspaces)))')
	echo "$windows" | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"'
}

get_all_geometry() {
	local -r monitors=$(get_monitors_geometry)
	local -r windows=$(get_windows_geometry)
	printf "%s\n%s" "$monitors" "$windows"
}

select_geometry() {
	local geometries="$1"
	local -r selected=$(echo "$geometries" | slurp -b "#000000A0" -c "#A0A0A0FF" -s "#00000000" -B "#000000A0" -w 1)

	if [[ -z $selected ]]; then
		exit 1
	fi

	printf "%s" "$selected"
}

display_help() {
	printf "Usage: select-geometry [OPTIONS]\n"
	printf "Options:\n"
	printf "  -m, --monitor     Select monitor\n"
	printf "  -w, --window      Select window\n"
	printf "  -a, --all         Select all\n"
}

if [[ $# -eq 0 ]]; then
	display_help
	exit 1
fi

case $1 in
-m | --monitor)
	select_geometry "$(get_monitors_geometry)"
	;;
-w | --window)
	select_geometry "$(get_windows_geometry)"
	;;
-a | --all)
	select_geometry "$(get_all_geometry)"
	;;
-h | --help)
	display_help
	;;
*)
	display_help
	exit 1
	;;
esac
