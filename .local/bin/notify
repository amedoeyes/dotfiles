#!/bin/bash

mprisctl=$XDG_BIN_HOME/mprisctl
audioctl=$XDG_BIN_HOME/audioctl
brightctl=$XDG_BIN_HOME/brightctl

mpris_cache_art() {
	local artUrl=$1
	if [ -z "$artUrl" ]; then
		printf ""
		return
	fi

	if [[ "$artUrl" == file://* ]]; then
		printf "%s" "${artUrl#file://}"
		return
	fi

	local cache_dir="$HOME/.cache/mpris"
	local -r art_name=$(basename "$artUrl")
	local -r art_path="$cache_dir/$art_name"

	if [ ! -d "$cache_dir" ]; then
		mkdir -p "$cache_dir"
	fi

	if [ ! -e "$art_path" ]; then
		wget -q "$artUrl" -O "$art_path"
	fi

	printf "%s" "$art_path"
}

mpris_notify() {
	local -r artist=$($mprisctl --display-metadata xesam:artist)
	local -r album=$($mprisctl --display-metadata xesam:album)
	local -r title=$($mprisctl --display-metadata xesam:title)
	local -r art_path=$(mpris_cache_art "$($mprisctl --display-metadata mpris:artUrl)")
	if [ -z "$title" ]; then
		return
	fi
	dunstify "$title" "${artist:+"$artist "}${album:+"- $album"}${1:+\n$1}" -i "${artpath:- }" -u low -t 2000 -r 998 $2
}

mpris_notify_volume() {
	local -r volume=$($mprisctl --display-player-properties Volume | awk '{print int($1 * 100)}')
	mpris_notify "<b>Volume ${volume}%</b>" "-h int:value:$volume"
}

audio_get_icon() {
	local device="$1"

	local icon_prefix=""
	if [[ $device == "input" ]]; then
		icon_prefix="microphone-sensitivity"
	elif [[ $device == "output" ]]; then
		icon_prefix="audio-volume"
	else
		printf "Invalid device: %s\n" "$device" >&2
		exit 1
	fi

	if "$($audioctl --is-"$device"-muted)"; then
		printf "%s-muted-symbolic" "$icon_prefix"
		return
	fi

	local -r volume=$($audioctl --get-"$device"-volume)
	if ((volume >= 66)); then
		printf "%s-high-symbolic" "$icon_prefix"
	elif ((volume >= 33)); then
		printf "%s-medium-symbolic" "$icon_prefix"
	elif ((volume >= 0)); then
		printf "%s-low-symbolic" "$icon_prefix"
	fi
}

audio_notify() {
	local device="$1"
	local -r volume=$($audioctl --get-"$device"-volume)
	local -r icon=$(audio_get_icon "$device")
	dunstify "Volume $volume%" -i "$icon" -u low -t 2000 -h int:value:"$volume" -r 999
}

brightness_notify() {
	local -r brightness=$($brightctl -g)
	local icon=""
	if ((brightness >= 75)); then
		icon="display-brightness-high-symbolic"
	elif ((brightness >= 50)); then
		icon="display-brightness-medium-symbolic"
	elif ((brightness >= 25)); then
		icon="display-brightness-low-symbolic"
	elif ((brightness >= 0)); then
		icon="display-brightness-off-symbolic"
	fi
	notify-send -a "Brightness" "$brightness%" -i "$icon" -u low -t 2000 -h int:value:"$brightness" -r 999
}

display_help() {
	printf "Usage: notify [OPTION]\n\n"
	printf "Options:\n"
	printf "  --mpris           Notify about the currently playing media.\n"
	printf "  --mpris-volume    Notify about the playing media and volume.\n"
	printf "  --audio-input     Notify about the audio input device.\n"
	printf "  --audio-output    Notify about the audio output device.\n"
	printf "  --brightness      Notify about the current brightness level.\n"
	printf "  --help            Display this help message.\n"
}

case "$1" in
--mpris) mpris_notify ;;
--mpris-volume) mpris_notify_volume ;;
--audio-input) audio_notify "input" ;;
--audio-output) audio_notify "output" ;;
--brightness) brightness_notify ;;
--help) display_help ;;
*) display_help ;;
esac
